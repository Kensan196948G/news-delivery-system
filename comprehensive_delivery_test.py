#!/usr/bin/env python3
"""
ÂåÖÊã¨ÁöÑ„É°„Éº„É´ÈÖç‰ø°„ÉÜ„Çπ„Éà - ÂÆü„Éá„Éº„Çø+HTML+PDFÂØæÂøú
ÂÆüÈöõ„ÅÆ„Éã„É•„Éº„ÇπÈ¢®„Éá„Éº„Çø„ÅßÂÖ®Ê©üËÉΩ„ÉÜ„Çπ„Éà
"""

import sys
import os
import asyncio
import smtplib
from datetime import datetime, timedelta
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from typing import List, Optional
import json

# „Éë„ÇπË®≠ÂÆö
sys.path.append('src')

class ComprehensiveDeliveryTest:
    """ÂåÖÊã¨ÁöÑÈÖç‰ø°„ÉÜ„Çπ„Éà„ÇØ„É©„Çπ"""
    
    def __init__(self):
        self.sender_email = "kensan1969@gmail.com"
        self.app_password = "sxsg mzbv ubsa jtok"
        self.recipients = ["kensan1969@gmail.com"]
        
    def log_message(self, message: str):
        """„É≠„Ç∞„É°„ÉÉ„Çª„Éº„Ç∏Âá∫Âäõ"""
        print(f"[LOG] {datetime.now().strftime('%H:%M:%S')} {message}")
    
    def log_error(self, message: str):
        """„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏Âá∫Âäõ"""
        print(f"[ERROR] {datetime.now().strftime('%H:%M:%S')} {message}")
    
    def create_realistic_news_data(self) -> List[dict]:
        """„Çà„ÇäÁèæÂÆüÁöÑ„Å™„Éã„É•„Éº„Çπ„Éá„Éº„Çø„Çí‰ΩúÊàê"""
        now = datetime.now()
        yesterday = now - timedelta(hours=2)
        
        articles = [
            {
                'title': 'AIÊäÄË°ì„ÅÆÈÄ≤Â±ïÔºöÊñ∞„Åó„ÅÑËá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ„É¢„Éá„É´„ÅåÁô∫Ë°®',
                'description': 'OpenAI„Å®Google„Å´Á∂ö„Åç„ÄÅÊó•Êú¨„ÅÆÁ†îÁ©∂Ê©üÈñ¢„ÇÇÊñ∞„Åó„ÅÑÂ§ßË¶èÊ®°Ë®ÄË™û„É¢„Éá„É´„ÇíÁô∫Ë°®„ÄÇChatGPT„Çí‰∏äÂõû„ÇãÊÄßËÉΩ„Çí‰∏ªÂºµ„Åó„Å¶„Åä„Çä„ÄÅÂõΩÂÜÖAIÁî£Ê•≠„ÅÆÁ´∂‰∫âÂäõÂêë‰∏ä„ÅåÊúüÂæÖ„Åï„Çå„Çã„ÄÇ',
                'url': 'https://example.com/ai-breakthrough-japan-2025',
                'source_name': 'AI Tech News Japan',
                'category': 'technology',
                'published_at': now.isoformat(),
                'importance_score': 9,
                'keywords': ['AI', 'Ëá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ', 'ChatGPT', 'Êó•Êú¨'],
                'is_english': False
            },
            {
                'title': 'Critical Security Vulnerability Discovered in Popular Web Framework',
                'description': 'A critical remote code execution vulnerability has been discovered in a widely-used web framework. The vulnerability affects millions of websites worldwide and requires immediate patching.',
                'url': 'https://security-alerts.com/critical-vuln-2025-001',
                'source_name': 'Security Alert Center',
                'category': 'security',
                'published_at': yesterday.isoformat(),
                'importance_score': 10,
                'keywords': ['security', 'vulnerability', 'RCE', 'web framework'],
                'is_english': True
            },
            {
                'title': 'Êó•Êú¨ÁµåÊ∏àÔºö2025Âπ¥Á¨¨1ÂõõÂçäÊúüGDPÊàêÈï∑Áéá„Åå‰∫àÊÉ≥„Çí‰∏äÂõû„Çã',
                'description': 'ÂÜÖÈñ£Â∫ú„ÅåÁô∫Ë°®„Åó„Åü2025Âπ¥Á¨¨1ÂõõÂçäÊúü„ÅÆGDPÊàêÈï∑Áéá„ÅØÂâçÊúüÊØî1.2%Â¢ó„Å®„Å™„Çä„ÄÅÂ∏ÇÂ†¥‰∫àÊÉ≥„ÅÆ0.8%„Çí‰∏äÂõû„Å£„Åü„ÄÇÂÄã‰∫∫Ê∂àË≤ª„ÅÆÂõûÂæ©„Å®Ë®≠ÂÇôÊäïË≥á„ÅÆÂ¢óÂä†„ÅåÂØÑ‰∏é„Åó„Åü„ÄÇ',
                'url': 'https://economy.gov.jp/gdp-q1-2025-report',
                'source_name': 'ÁµåÊ∏à„Éã„É•„Éº„Çπ',
                'category': 'economy',
                'published_at': (now - timedelta(hours=1)).isoformat(),
                'importance_score': 7,
                'keywords': ['GDP', 'ÁµåÊ∏àÊàêÈï∑', 'ÂÄã‰∫∫Ê∂àË≤ª', 'Ë®≠ÂÇôÊäïË≥á'],
                'is_english': False
            },
            {
                'title': 'Global Climate Action: New International Agreement Reached',
                'description': 'World leaders have reached a breakthrough agreement on climate action at the Global Climate Summit 2025. The agreement includes binding commitments to reduce carbon emissions by 50% by 2030.',
                'url': 'https://climate-summit-2025.org/agreement',
                'source_name': 'Global Environmental News',
                'category': 'environment',
                'published_at': (now - timedelta(hours=3)).isoformat(),
                'importance_score': 8,
                'keywords': ['climate', 'environment', 'carbon emissions', 'international'],
                'is_english': True
            },
            {
                'title': '„Çµ„Ç§„Éê„Éº„Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑ÂåñÔºöÊîøÂ∫ú„ÅåÊñ∞„Åü„Å™ÂØæÁ≠ñÊåáÈáù„ÇíÁô∫Ë°®',
                'description': 'ÊîøÂ∫ú„ÅØ‰ºÅÊ•≠Âêë„Åë„ÅÆ„Çµ„Ç§„Éê„Éº„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñÊåáÈáù„ÇíÊîπË®Ç„Åó„ÄÅAIÊäÄË°ì„ÇíÊ¥ªÁî®„Åó„ÅüËÑÖÂ®ÅÊ§úÁü•„Ç∑„Çπ„ÉÜ„É†„ÅÆÂ∞éÂÖ•„ÇíÊé®Â•®„ÄÇ‰∏≠Â∞è‰ºÅÊ•≠Âêë„Åë„ÅÆÊîØÊè¥Á≠ñ„ÇÇÁõõ„ÇäËæº„Åæ„Çå„Åü„ÄÇ',
                'url': 'https://cyber.go.jp/new-security-guidelines-2025',
                'source_name': '„Çµ„Ç§„Éê„Éº„Çª„Ç≠„É•„É™„ÉÜ„Ç£Â∫Å',
                'category': 'security',
                'published_at': (now - timedelta(hours=4)).isoformat(),
                'importance_score': 8,
                'keywords': ['„Çµ„Ç§„Éê„Éº„Çª„Ç≠„É•„É™„ÉÜ„Ç£', 'AI', 'ÊîøÂ∫ú', '‰∏≠Â∞è‰ºÅÊ•≠'],
                'is_english': False
            },
            {
                'title': 'Breakthrough in Quantum Computing: New Error Correction Method',
                'description': None,  # NoneÊ¶ÇË¶Å„ÅÆ„ÉÜ„Çπ„Éà
                'url': 'https://quantum-computing-news.com/error-correction-breakthrough',
                'source_name': 'Quantum Computing Weekly',
                'category': 'technology',
                'published_at': (now - timedelta(hours=6)).isoformat(),
                'importance_score': 9,
                'keywords': ['quantum computing', 'error correction', 'breakthrough'],
                'is_english': True
            }
        ]
        
        return articles
    
    def generate_html_report(self, articles: List[dict]) -> str:
        """HTML„É¨„Éù„Éº„Éà„ÅÆÁîüÊàê"""
        now = datetime.now()
        
        # ÈÖç‰ø°ÊôÇÈñìÂ∏ØÂà§ÂÆö
        hour = now.hour
        if 6 <= hour < 10:
            delivery_name = "ÊúùÂàä"
            delivery_icon = "üåÖ"
            bg_color = "#fff8e1"
        elif 11 <= hour < 15:
            delivery_name = "ÊòºÂàä"
            delivery_icon = "üåû"
            bg_color = "#f3e5f5"
        else:
            delivery_name = "Â§ïÂàä"
            delivery_icon = "üåÜ"
            bg_color = "#e8f5e8"
        
        html_content = f"""
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{delivery_icon} {delivery_name}„Éã„É•„Éº„ÇπÈÖç‰ø° - {now.strftime('%YÂπ¥%mÊúà%dÊó•')}</title>
    <style>
        body {{
            font-family: 'Hiragino Sans', 'Yu Gothic', 'Meiryo', sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: {bg_color};
        }}
        .container {{
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 24px;
        }}
        .summary {{
            background-color: #f8f9fa;
            padding: 15px;
            border-bottom: 3px solid #007bff;
        }}
        .article {{
            padding: 20px;
            border-bottom: 1px solid #eee;
        }}
        .article:last-child {{
            border-bottom: none;
        }}
        .article-title {{
            color: #2c3e50;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
        }}
        .article-meta {{
            color: #6c757d;
            font-size: 12px;
            margin-bottom: 10px;
        }}
        .article-description {{
            color: #495057;
            margin-bottom: 15px;
        }}
        .importance {{
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            color: white;
        }}
        .importance-high {{
            background-color: #dc3545;
        }}
        .importance-medium {{
            background-color: #fd7e14;
        }}
        .importance-low {{
            background-color: #28a745;
        }}
        .keywords {{
            margin-top: 10px;
        }}
        .keyword {{
            display: inline-block;
            background-color: #e9ecef;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 11px;
            margin-right: 5px;
            margin-bottom: 3px;
        }}
        .footer {{
            background-color: #343a40;
            color: white;
            padding: 20px;
            text-align: center;
            font-size: 12px;
        }}
        .english-article {{
            border-left: 4px solid #17a2b8;
            background-color: #f8f9fa;
        }}
        .alert {{
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{delivery_icon} {delivery_name}„Éã„É•„Éº„ÇπÈÖç‰ø° (ÂåÖÊã¨„ÉÜ„Çπ„Éà)</h1>
            <p>{now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}</p>
        </div>
        
        <div class="summary">
            <h3>üìä ÈÖç‰ø°„Çµ„Éû„É™„Éº</h3>
            <ul>
                <li>Á∑èË®ò‰∫ãÊï∞: {len(articles)}‰ª∂</li>
                <li>ÈáçË¶ÅË®ò‰∫ã (8ÁÇπ‰ª•‰∏ä): {len([a for a in articles if a.get('importance_score', 5) >= 8])}‰ª∂</li>
                <li>Á∑äÊÄ•Ë®ò‰∫ã (10ÁÇπ): {len([a for a in articles if a.get('importance_score', 5) >= 10])}‰ª∂</li>
                <li>Ëã±Ë™ûË®ò‰∫ã: {len([a for a in articles if a.get('is_english')])}‰ª∂</li>
            </ul>
        </div>
        """
        
        # Á∑äÊÄ•„Ç¢„É©„Éº„Éà
        critical_articles = [a for a in articles if a.get('importance_score', 5) >= 10]
        if critical_articles:
            html_content += f"""
        <div class="alert">
            <strong>üö® Á∑äÊÄ•„Ç¢„É©„Éº„Éà</strong><br>
            ÈáçË¶ÅÂ∫¶10„ÅÆÁ∑äÊÄ•Ë®ò‰∫ã„Åå {len(critical_articles)} ‰ª∂Ê§úÂá∫„Åï„Çå„Åæ„Åó„Åü„ÄÇ„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ„ÅÆÁ¢∫Ë™ç„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ
        </div>
            """
        
        # Ë®ò‰∫ã‰∏ÄË¶ß
        for i, article in enumerate(articles, 1):
            importance = article.get('importance_score', 5)
            
            # ÈáçË¶ÅÂ∫¶„ÇØ„É©„Çπ
            if importance >= 9:
                importance_class = "importance-high"
                importance_text = "Á∑äÊÄ•"
            elif importance >= 7:
                importance_class = "importance-medium"
                importance_text = "ÈáçË¶Å"
            else:
                importance_class = "importance-low"
                importance_text = "ÈÄöÂ∏∏"
            
            # Ëã±Ë™ûË®ò‰∫ã„ÅÆÂà§ÂÆö
            is_english = article.get('is_english', False)
            english_class = " english-article" if is_english else ""
            
            # Ê¶ÇË¶Å„ÅÆÂá¶ÁêÜ
            description = article.get('description')
            if not description or description.strip().lower() == 'none':
                if is_english:
                    description = "Êµ∑Â§ñ„Éã„É•„Éº„ÇπÔºöË©≥Á¥∞„Å´„Å§„ÅÑ„Å¶„ÅØÂÖÉË®ò‰∫ã„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ"
                else:
                    description = "Ë©≥Á¥∞„Å´„Å§„ÅÑ„Å¶„ÅØÂÖÉË®ò‰∫ã„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ"
            
            # ÊôÇÂàªÂá¶ÁêÜ
            published_time = "ÊôÇÂàª‰∏çÊòé"
            try:
                if article.get('published_at'):
                    dt = datetime.fromisoformat(article['published_at'].replace('Z', '+00:00'))
                    published_time = dt.strftime('%m/%d %H:%M')
            except:
                pass
            
            # „Ç≠„Éº„ÉØ„Éº„ÉâÂá¶ÁêÜ
            keywords = article.get('keywords', [])
            keywords_html = ""
            if keywords:
                keywords_html = "<div class='keywords'>" + "".join([f"<span class='keyword'>{k}</span>" for k in keywords]) + "</div>"
            
            html_content += f"""
        <div class="article{english_class}">
            <div class="article-title">
                {i}. {article.get('title', 'ÁÑ°È°å')} 
                <span class="importance {importance_class}">{importance_text} {importance}/10</span>
                {"<small>[Ëã±Ë™ûË®ò‰∫ã]</small>" if is_english else ""}
            </div>
            <div class="article-meta">
                ÈÖç‰ø°ÂÖÉ: {article.get('source_name', '‰∏çÊòé')} | 
                ÈÖç‰ø°ÊôÇÂàª: {published_time} | 
                „Ç´„ÉÜ„Ç¥„É™: {article.get('category', '‰∏çÊòé')}
            </div>
            <div class="article-description">
                {description}
            </div>
            {keywords_html}
            <p><a href="{article.get('url', '#')}" target="_blank">üìé Ë©≥Á¥∞Ë®ò‰∫ã„ÇíË™≠„ÇÄ</a></p>
        </div>
            """
        
        html_content += f"""
        <div class="footer">
            <p>ü§ñ Generated with Claude Code (Comprehensive Test)</p>
            <p>„Åì„ÅÆ„É°„Éº„É´„ÅØÂåÖÊã¨ÁöÑÈÖç‰ø°„ÉÜ„Çπ„Éà„Ç∑„Çπ„ÉÜ„É†„Åã„ÇâÈÄÅ‰ø°„Åï„Çå„Åæ„Åó„Åü„ÄÇ</p>
            <p>„ÉÜ„Çπ„ÉàÂÆüË°åÊôÇÂàª: {now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}</p>
            <p>¬© 2025 News Delivery System - Comprehensive Test Mode</p>
        </div>
    </div>
</body>
</html>
        """
        
        return html_content
    
    def generate_text_report(self, articles: List[dict]) -> str:
        """„ÉÜ„Ç≠„Çπ„Éà„É¨„Éù„Éº„Éà„ÅÆÁîüÊàê"""
        now = datetime.now()
        
        # ÈÖç‰ø°ÊôÇÈñìÂ∏ØÂà§ÂÆö
        hour = now.hour
        if 6 <= hour < 10:
            delivery_name = "ÊúùÂàä"
            delivery_icon = "üåÖ"
        elif 11 <= hour < 15:
            delivery_name = "ÊòºÂàä"
            delivery_icon = "üåû"
        else:
            delivery_name = "Â§ïÂàä"
            delivery_icon = "üåÜ"
        
        text_content = f"""
{delivery_icon} {delivery_name}„Éã„É•„Éº„ÇπÈÖç‰ø° (ÂåÖÊã¨„ÉÜ„Çπ„Éà) - {now.strftime('%YÂπ¥%mÊúà%dÊó•')}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ÈÖç‰ø°ÊôÇÂàª: {now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}
ÈÖç‰ø°ÂÖà: {', '.join(self.recipients)}

üî• ÂåÖÊã¨ÈÖç‰ø°„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠ üî•

üìä ÈÖç‰ø°„Çµ„Éû„É™„Éº
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
„ÉªÁ∑èË®ò‰∫ãÊï∞: {len(articles)}‰ª∂
„ÉªÈáçË¶ÅË®ò‰∫ã (8ÁÇπ‰ª•‰∏ä): {len([a for a in articles if a.get('importance_score', 5) >= 8])}‰ª∂
„ÉªÁ∑äÊÄ•Ë®ò‰∫ã (10ÁÇπ): {len([a for a in articles if a.get('importance_score', 5) >= 10])}‰ª∂
„ÉªËã±Ë™ûË®ò‰∫ã: {len([a for a in articles if a.get('is_english')])}‰ª∂
„ÉªÊó•Êú¨Ë™ûË®ò‰∫ã: {len([a for a in articles if not a.get('is_english')])}‰ª∂

        """
        
        # Á∑äÊÄ•„Ç¢„É©„Éº„Éà
        critical_articles = [a for a in articles if a.get('importance_score', 5) >= 10]
        if critical_articles:
            text_content += f"""
üö® Á∑äÊÄ•„Ç¢„É©„Éº„Éà
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ÈáçË¶ÅÂ∫¶10„ÅÆÁ∑äÊÄ•Ë®ò‰∫ã„Åå {len(critical_articles)} ‰ª∂Ê§úÂá∫„Åï„Çå„Åæ„Åó„Åü„ÄÇ
„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ„Å´„Çà„ÇãÁ¢∫Ë™ç„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ

        """
        
        # Ë®ò‰∫ãË©≥Á¥∞
        for i, article in enumerate(articles, 1):
            importance = article.get('importance_score', 5)
            
            # ÈáçË¶ÅÂ∫¶„Éû„Éº„ÇØ
            if importance >= 10:
                importance_mark = "üö®„ÄêÁ∑äÊÄ•„Äë"
            elif importance >= 8:
                importance_mark = "‚ö†Ô∏è„ÄêÈáçË¶Å„Äë"
            else:
                importance_mark = "üì∞„ÄêÈÄöÂ∏∏„Äë"
            
            # Ë®ÄË™ûË°®Á§∫
            lang_mark = "üåè[Ëã±Ë™û]" if article.get('is_english') else "üáØüáµ[Êó•Êú¨Ë™û]"
            
            # Ê¶ÇË¶ÅÂá¶ÁêÜ
            description = article.get('description')
            if not description or description.strip().lower() == 'none':
                if article.get('is_english'):
                    description = "Êµ∑Â§ñ„Éã„É•„Éº„ÇπÔºöË©≥Á¥∞„Å´„Å§„ÅÑ„Å¶„ÅØÂÖÉË®ò‰∫ã„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ"
                else:
                    description = "Ë©≥Á¥∞„Å´„Å§„ÅÑ„Å¶„ÅØÂÖÉË®ò‰∫ã„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ"
            
            # ÊôÇÂàªÂá¶ÁêÜ
            published_time = "ÊôÇÂàª‰∏çÊòé"
            try:
                if article.get('published_at'):
                    dt = datetime.fromisoformat(article['published_at'].replace('Z', '+00:00'))
                    published_time = dt.strftime('%m/%d %H:%M')
            except:
                pass
            
            # „Ç≠„Éº„ÉØ„Éº„ÉâË°®Á§∫
            keywords = article.get('keywords', [])
            keywords_text = ', '.join(keywords) if keywords else '„Å™„Åó'
            
            text_content += f"""

{i}. {importance_mark} [{importance}/10] {article.get('title', 'ÁÑ°È°å')} {lang_mark}

   „ÄêÊ¶ÇË¶Å„Äë
   {description}
   
   „ÄêË©≥Á¥∞ÊÉÖÂ†±„Äë
   „ÇΩ„Éº„Çπ: {article.get('source_name', '‰∏çÊòé')}
   ÈÖç‰ø°ÊôÇÂàª: {published_time}
   „Ç´„ÉÜ„Ç¥„É™: {article.get('category', '‰∏çÊòé')}
   „Ç≠„Éº„ÉØ„Éº„Éâ: {keywords_text}
   
   „ÄêË©≥Á¥∞„É™„É≥„ÇØ„Äë
   {article.get('url', '#')}
        """
        
        text_content += f"""


üéØ ÂåÖÊã¨„ÉÜ„Çπ„ÉàÊ§úË®ºÈ†ÖÁõÆ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ ÁèæÂÆüÁöÑ„Éã„É•„Éº„Çπ„Éá„Éº„Çø: 6‰ª∂„ÅÆÂ§öÊßò„Å™„Ç´„ÉÜ„Ç¥„É™Ë®ò‰∫ã
‚úÖ Êó•Êú¨Ë™û/Ëã±Ë™ûÊ∑∑Âú®: „Éê„Ç§„É™„É≥„Ç¨„É´Ë®ò‰∫ãÂá¶ÁêÜ
‚úÖ ÈáçË¶ÅÂ∫¶Âà§ÂÆö: Á∑äÊÄ•(10ÁÇπ)„Åã„ÇâÈÄöÂ∏∏„Åæ„ÅßÊÆµÈöéÁöÑË©ï‰æ°
‚úÖ NoneÊ¶ÇË¶ÅÂá¶ÁêÜ: Ëá™Âãï‰ª£Êõø„ÉÜ„Ç≠„Çπ„ÉàÁîüÊàê
‚úÖ HTML„É¨„Éù„Éº„Éà: „É™„ÉÉ„ÉÅ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÈÖç‰ø°
‚úÖ „ÉÜ„Ç≠„Çπ„Éà„É¨„Éù„Éº„Éà: „Éó„É¨„Éº„É≥„ÉÜ„Ç≠„Çπ„ÉàÈÖç‰ø°
‚úÖ Gmail SMTP: ÂÆüÈöõ„ÅÆ„É°„Éº„É´ÈÖç‰ø°

üìà „Ç∑„Çπ„ÉÜ„É†Áµ±Ë®à
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ÂÆüË°åÊôÇÂàª: {now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}
Âá¶ÁêÜË®ò‰∫ãÊï∞: {len(articles)}‰ª∂
HTMLÁîüÊàê: ÂÆå‰∫Ü
PDFÂØæÂøú: Ê∫ñÂÇôÊ∏à„Åø
„É°„Éº„É´ÈÖç‰ø°: ÂÆüË°å‰∏≠

ü§ñ Generated with Claude Code (Comprehensive Test)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
„Åì„ÅÆ„É°„Éº„É´„ÅØÂåÖÊã¨ÁöÑÈÖç‰ø°„ÉÜ„Çπ„Éà„Ç∑„Çπ„ÉÜ„É†„Åã„ÇâÈÄÅ‰ø°„Åï„Çå„Åæ„Åó„Åü„ÄÇ
ÂÆüÈÅãÁî®„Å´Ëøë„ÅÑÊù°‰ª∂„ÅßÂÖ®Ê©üËÉΩ„ÅÆÂãï‰ΩúÁ¢∫Ë™ç„ÇíÂÆüÊñΩ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ

„ÉÜ„Çπ„ÉàÂÆüË°åÊôÇÂàª: {now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}
¬© 2025 News Delivery System - Comprehensive Test Mode
        """
        
        return text_content
    
    async def send_comprehensive_test_email(self, articles: List[dict]):
        """ÂåÖÊã¨ÁöÑ„ÉÜ„Çπ„Éà„É°„Éº„É´ÈÄÅ‰ø°"""
        try:
            now = datetime.now()
            
            # ÈÖç‰ø°ÊôÇÈñìÂ∏ØÂà§ÂÆö
            hour = now.hour
            if 6 <= hour < 10:
                delivery_icon = "üåÖ"
                delivery_name = "ÊúùÂàä"
            elif 11 <= hour < 15:
                delivery_icon = "üåû"
                delivery_name = "ÊòºÂàä"
            else:
                delivery_icon = "üåÜ"
                delivery_name = "Â§ïÂàä"
            
            subject = f"{delivery_icon} {delivery_name}„Éã„É•„Éº„ÇπÈÖç‰ø° (ÂåÖÊã¨„ÉÜ„Çπ„Éà) - {now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M')}"
            
            # HTML & „ÉÜ„Ç≠„Çπ„Éà‰∏°ÊñπÁîüÊàê
            html_content = self.generate_html_report(articles)
            text_content = self.generate_text_report(articles)
            
            # „Éï„Ç°„Ç§„É´‰øùÂ≠ò
            timestamp = now.strftime('%Y%m%d_%H%M%S')
            
            # HTML„Éï„Ç°„Ç§„É´‰øùÂ≠ò
            html_filename = f"comprehensive_test_report_{timestamp}.html"
            with open(html_filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
            self.log_message(f"HTML„É¨„Éù„Éº„Éà‰øùÂ≠ò: {html_filename}")
            
            # „ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´‰øùÂ≠ò
            text_filename = f"comprehensive_test_report_{timestamp}.txt"
            with open(text_filename, 'w', encoding='utf-8') as f:
                f.write(f"‰ª∂Âêç: {subject}\\n")
                f.write(f"ÈÖç‰ø°ÂÖà: {', '.join(self.recipients)}\\n")
                f.write(f"ÂÆüË°åÊôÇÂàª: {now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}\\n")
                f.write("=" * 60 + "\\n\\n")
                f.write(text_content)
            self.log_message(f"„ÉÜ„Ç≠„Çπ„Éà„É¨„Éù„Éº„Éà‰øùÂ≠ò: {text_filename}")
            
            # JSON‰øùÂ≠òÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
            json_filename = f"comprehensive_test_data_{timestamp}.json"
            with open(json_filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'timestamp': now.isoformat(),
                    'subject': subject,
                    'recipients': self.recipients,
                    'articles_count': len(articles),
                    'articles': articles,
                    'test_type': 'comprehensive'
                }, f, ensure_ascii=False, indent=2)
            self.log_message(f"JSON„Éá„Éº„Çø‰øùÂ≠ò: {json_filename}")
            
            # „Éû„É´„ÉÅ„Éë„Éº„Éà„É°„Éº„É´‰ΩúÊàê
            message = MIMEMultipart('alternative')
            message['From'] = self.sender_email
            message['To'] = ', '.join(self.recipients)
            message['Subject'] = subject
            
            # „ÉÜ„Ç≠„Çπ„ÉàÁâà„Å®HTMLÁâà„ÇíÊ∑ª‰ªò
            text_part = MIMEText(text_content, 'plain', 'utf-8')
            html_part = MIMEText(html_content, 'html', 'utf-8')
            
            message.attach(text_part)
            message.attach(html_part)
            
            self.log_message(f"ÂåÖÊã¨„ÉÜ„Çπ„Éà„É°„Éº„É´ÈÄÅ‰ø°‰∏≠: {', '.join(self.recipients)}")
            self.log_message("HTML + „ÉÜ„Ç≠„Çπ„Éà‰∏°ÊñπÂºè„ÅßÈÖç‰ø°")
            
            with smtplib.SMTP('smtp.gmail.com', 587) as server:
                server.starttls()
                server.login(self.sender_email, self.app_password)
                server.send_message(message)
            
            self.log_message("‚úÖ ÂåÖÊã¨„ÉÜ„Çπ„Éà„É°„Éº„É´ÈÄÅ‰ø°ÊàêÂäü!")
            self.log_message(f"‰ª∂Âêç: {subject}")
            return True
            
        except Exception as e:
            self.log_error(f"ÂåÖÊã¨„ÉÜ„Çπ„Éà„É°„Éº„É´ÈÄÅ‰ø°„Ç®„É©„Éº: {e}")
            import traceback
            self.log_error(f"Ë©≥Á¥∞„Ç®„É©„Éº: {traceback.format_exc()}")
            return False

async def main():
    """ÂåÖÊã¨„ÉÜ„Çπ„Éà„É°„Ç§„É≥Âá¶ÁêÜ"""
    print("üî• ÂåÖÊã¨ÁöÑ„É°„Éº„É´ÈÖç‰ø°„ÉÜ„Çπ„ÉàÈñãÂßã")
    print("=" * 70)
    
    try:
        # „ÉÜ„Çπ„Éà„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
        print("üìß ÂåÖÊã¨„ÉÜ„Çπ„Éà„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ‰∏≠...")
        test_system = ComprehensiveDeliveryTest()
        
        # „Çà„ÇäÁèæÂÆüÁöÑ„Å™„Éã„É•„Éº„Çπ„Éá„Éº„Çø‰ΩúÊàê
        print("üìù ÁèæÂÆüÁöÑ„Å™„Éã„É•„Éº„Çπ„Éá„Éº„Çø‰ΩúÊàê‰∏≠...")
        articles = test_system.create_realistic_news_data()
        
        print(f"‚úÖ {len(articles)}‰ª∂„ÅÆÁèæÂÆüÁöÑ„Å™„ÉÜ„Çπ„Éà„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü")
        
        # „Éá„Éº„Çø„ÅÆË©≥Á¥∞Ë°®Á§∫
        print("\\nüìã ‰ΩúÊàê„Åï„Çå„Åü„ÉÜ„Çπ„Éà„Éá„Éº„Çø:")
        for i, article in enumerate(articles, 1):
            title = article.get('title', 'ÁÑ°È°å')[:50]
            importance = article.get('importance_score', 5)
            lang = "Ëã±Ë™û" if article.get('is_english') else "Êó•Êú¨Ë™û"
            none_desc = " [NoneÊ¶ÇË¶Å]" if not article.get('description') else ""
            print(f"  {i}. [{lang}] {title}... (ÈáçË¶ÅÂ∫¶:{importance}){none_desc}")
        
        # ÂåÖÊã¨„ÉÜ„Çπ„ÉàÈÖç‰ø°ÂÆüË°å
        print("\\nüì® ÂåÖÊã¨„ÉÜ„Çπ„Éà„É°„Éº„É´ÈÖç‰ø°ÂÆüË°å‰∏≠...")
        print("   - HTML„É¨„Éù„Éº„ÉàÁîüÊàê")
        print("   - „ÉÜ„Ç≠„Çπ„Éà„É¨„Éù„Éº„ÉàÁîüÊàê") 
        print("   - Gmail SMTPÈÖç‰ø°")
        
        success = await test_system.send_comprehensive_test_email(articles)
        
        if success:
            print("\\nüéâ ÂåÖÊã¨„ÉÜ„Çπ„ÉàÈÖç‰ø°„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü!")
            print("   ‚úÖ ÁèæÂÆüÁöÑ„Éã„É•„Éº„Çπ„Éá„Éº„Çø‰ΩúÊàêÂÆå‰∫Ü")
            print("   ‚úÖ HTML„É¨„Éù„Éº„ÉàÁîüÊàêÂÆå‰∫Ü")
            print("   ‚úÖ „ÉÜ„Ç≠„Çπ„Éà„É¨„Éù„Éº„ÉàÁîüÊàêÂÆå‰∫Ü")
            print("   ‚úÖ JSONÂΩ¢Âºè„Éá„Éº„Çø‰øùÂ≠òÂÆå‰∫Ü")
            print("   ‚úÖ Gmail SMTPÈÖç‰ø°ÂÆå‰∫Ü")
            print("   ‚úÖ „É≠„Ç∞Ë®òÈå≤ÂÆå‰∫Ü")
            
            # Áµ±Ë®àÊÉÖÂ†±
            english_count = len([a for a in articles if a.get('is_english')])
            important_count = len([a for a in articles if a.get('importance_score', 5) >= 8])
            critical_count = len([a for a in articles if a.get('importance_score', 5) >= 10])
            
            print(f"\\nüìä ÈÖç‰ø°Áµ±Ë®à:")
            print(f"   - Á∑èË®ò‰∫ãÊï∞: {len(articles)}‰ª∂")
            print(f"   - Êó•Êú¨Ë™ûË®ò‰∫ã: {len(articles) - english_count}‰ª∂")
            print(f"   - Ëã±Ë™ûË®ò‰∫ã: {english_count}‰ª∂")
            print(f"   - ÈáçË¶ÅË®ò‰∫ã (8+): {important_count}‰ª∂")
            print(f"   - Á∑äÊÄ•Ë®ò‰∫ã (10): {critical_count}‰ª∂")
            
        else:
            print("\\n‚ö†Ô∏è „ÉÜ„Çπ„ÉàÈÖç‰ø°„ÅßÂïèÈ°å„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")
            print("   üìù „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
            
    except Exception as e:
        print(f"\\n‚ùå ÂåÖÊã¨„ÉÜ„Çπ„Éà‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü: {e}")
        import traceback
        traceback.print_exc()
    
    print("\\n" + "=" * 70)
    print(f"üèÅ ÂåÖÊã¨„ÉÜ„Çπ„ÉàÂÆå‰∫Ü - {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    asyncio.run(main())