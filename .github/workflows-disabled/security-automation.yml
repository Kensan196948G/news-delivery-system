name: Security Automation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install safety for vulnerability scanning
        run: |
          python -m pip install --upgrade pip
          pip install safety
      
      - name: Check for vulnerable dependencies
        id: safety
        run: |
          if [ -f requirements.txt ]; then
            safety check --json --file requirements.txt > safety-report.json || true
            
            # Parse results
            python3 << 'EOF'
import json
import os

try:
    with open('safety-report.json', 'r') as f:
        report = json.load(f)
    
    vulnerabilities = report if isinstance(report, list) else []
    
    if vulnerabilities:
        print(f"Found {len(vulnerabilities)} vulnerable dependencies")
        with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
            f.write("## 🔒 Security Vulnerabilities Found\n\n")
            for vuln in vulnerabilities[:10]:  # Limit to first 10
                f.write(f"- **{vuln.get('package', 'Unknown')}**: {vuln.get('vulnerability', 'Unknown issue')}\n")
    else:
        print("No vulnerabilities found")
except Exception as e:
    print(f"Error parsing safety report: {e}")
EOF
          fi

  code-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Bandit for security scanning
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]
      
      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json --severity-level medium || true
          
          # Parse and report findings
          python3 << 'EOF'
import json
import os

try:
    with open('bandit-report.json', 'r') as f:
        report = json.load(f)
    
    results = report.get('results', [])
    
    high_severity = [r for r in results if r.get('issue_severity') == 'HIGH']
    medium_severity = [r for r in results if r.get('issue_severity') == 'MEDIUM']
    
    with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
        f.write("## 🔍 Code Security Scan Results\n\n")
        f.write(f"- High severity issues: {len(high_severity)}\n")
        f.write(f"- Medium severity issues: {len(medium_severity)}\n\n")
        
        if high_severity:
            f.write("### High Severity Issues\n")
            for issue in high_severity[:5]:
                f.write(f"- **{issue.get('test_name', 'Unknown')}** in `{issue.get('filename', 'Unknown')}`\n")
                f.write(f"  Line {issue.get('line_number', '?')}: {issue.get('issue_text', 'No description')}\n")
except Exception as e:
    print(f"Error parsing bandit report: {e}")
EOF

  secret-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning
      
      - name: Run Gitleaks for secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for common secret patterns
        run: |
          # Custom secret detection patterns
          python3 << 'EOF'
import re
import os
from pathlib import Path

secret_patterns = {
    'API Key': r'(?i)(api[_\-]?key|apikey)\s*=\s*["\']([^"\']+)["\']',
    'AWS Access Key': r'AKIA[0-9A-Z]{16}',
    'Private Key': r'-----BEGIN (RSA |EC )?PRIVATE KEY-----',
    'Token': r'(?i)(token|bearer)\s*[:=]\s*["\']([^"\']+)["\']',
    'Password': r'(?i)(password|passwd|pwd)\s*[:=]\s*["\']([^"\']+)["\']',
}

found_secrets = []

for root, dirs, files in os.walk('.'):
    # Skip .git and other hidden directories
    dirs[:] = [d for d in dirs if not d.startswith('.')]
    
    for file in files:
        if file.endswith(('.py', '.yml', '.yaml', '.json', '.env', '.txt')):
            file_path = Path(root) / file
            try:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    
                for secret_type, pattern in secret_patterns.items():
                    if re.search(pattern, content):
                        found_secrets.append({
                            'file': str(file_path),
                            'type': secret_type
                        })
            except Exception as e:
                pass

if found_secrets:
    print(f"⚠️ Potential secrets found in {len(set(s['file'] for s in found_secrets))} files")
    for secret in found_secrets[:10]:  # Limit output
        print(f"  - {secret['type']} in {secret['file']}")
else:
    print("✅ No potential secrets detected")
EOF

  container-scan:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Dockerfile') || github.event_name == 'schedule'
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  license-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Check dependency licenses
        run: |
          pip install pip-licenses
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            
            # Generate license report
            pip-licenses --format=json > licenses.json
            
            # Check for problematic licenses
            python3 << 'EOF'
import json

problematic_licenses = ['GPL', 'AGPL', 'LGPL', 'SSPL']

with open('licenses.json', 'r') as f:
    licenses = json.load(f)

issues = []
for package in licenses:
    license_name = package.get('License', '')
    if any(prob in license_name for prob in problematic_licenses):
        issues.append({
            'package': package.get('Name'),
            'license': license_name
        })

if issues:
    print(f"⚠️ Found {len(issues)} packages with potentially problematic licenses:")
    for issue in issues:
        print(f"  - {issue['package']}: {issue['license']}")
else:
    print("✅ No license compatibility issues found")
EOF
          fi

  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, license-check]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Generate security report
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = context.payload.workflow_run?.jobs || [];
            const failures = jobs.filter(job => job.conclusion === 'failure');
            
            if (failures.length > 0 && context.eventName === 'pull_request') {
              // Add security label to PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['security-review-needed']
              });
              
              // Create comment on PR
              const comment = `## 🔒 Security Review Required
              
              The automated security scan has identified potential issues that need review:
              
              ${failures.map(job => `- ${job.name}: ${job.conclusion}`).join('\n')}
              
              Please review the security scan results and address any critical findings before merging.
              
              ### Security Checklist
              - [ ] No vulnerable dependencies
              - [ ] No hardcoded secrets or credentials
              - [ ] No high-severity code vulnerabilities
              - [ ] License compatibility verified
              - [ ] Container images scanned (if applicable)
              
              ---
              *Security scan completed at ${new Date().toISOString()}*`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: comment
              });
            }
      
      - name: Create security issue if critical
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if we need to create a security issue
            const today = new Date().toISOString().split('T')[0];
            const title = `🔒 Security Scan Report - ${today}`;
            
            // Check for existing issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security',
              per_page: 10
            });
            
            const existingIssue = issues.find(issue => issue.title.includes(today));
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: `## Daily Security Scan Results
                
                The automated security scan has completed. Please review the workflow results for details.
                
                ### Scan Areas
                - ✅ Dependency vulnerabilities
                - ✅ Code security analysis
                - ✅ Secret detection
                - ✅ License compliance
                - ✅ Container security (if applicable)
                
                [View full security scan results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                
                ---
                *This issue was automatically created by the security automation workflow.*`,
                labels: ['security', 'automated']
              });
            }