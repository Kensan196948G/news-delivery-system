name: Backup Automation

on:
  schedule:
    # 1時間おきのフルバックアップ
    - cron: '0 * * * *'
    # 30分おきのインクリメンタルチェック
    - cron: '30 * * * *'
  
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'バックアップタイプ'
        required: true
        default: 'incremental'
        type: choice
        options:
        - full
        - incremental
        - emergency

permissions:
  contents: read
  issues: write
  actions: read

jobs:
  automated-backup:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 完全履歴取得
        
    - name: Determine Backup Type
      id: backup-type
      run: |
        if [ "${{ github.event.inputs.backup_type }}" != "" ]; then
          BACKUP_TYPE="${{ github.event.inputs.backup_type }}"
        elif [ "$(date '+%M')" = "00" ]; then
          BACKUP_TYPE="full"
        else
          BACKUP_TYPE="incremental"
        fi
        
        echo "BACKUP_TYPE=$BACKUP_TYPE" >> $GITHUB_ENV
        echo "backup_type=$BACKUP_TYPE" >> $GITHUB_OUTPUT
        echo "🔄 バックアップタイプ: $BACKUP_TYPE"
        
    - name: Full Backup
      if: env.BACKUP_TYPE == 'full' || env.BACKUP_TYPE == 'emergency'
      run: |
        echo "=== フルバックアップ実行（$(date '+%Y-%m-%d %H:%M:%S JST')）===" 
        
        # バックアップディレクトリ作成
        BACKUP_DIR="backup-$(date '+%Y%m%d-%H%M%S')"
        mkdir -p "$BACKUP_DIR"
        
        # 全ファイルのアーカイブ作成
        echo "📦 アーカイブ作成中..."
        tar -czf "$BACKUP_DIR/full-backup.tar.gz" \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          .
          
        # バックアップ情報記録
        cat > "$BACKUP_DIR/backup-info.txt" << EOF
バックアップ情報
================
日時: $(date '+%Y-%m-%d %H:%M:%S JST')
タイプ: フル ($BACKUP_TYPE)
コミット: $(git rev-parse HEAD)
ブランチ: $(git branch --show-current)
ファイル数: $(find . -type f ! -path './.git/*' | wc -l)
サイズ: $(du -sh . | cut -f1)
EOF
        
        # Git状態記録
        git status > "$BACKUP_DIR/git-status.txt"
        git log --oneline -10 > "$BACKUP_DIR/recent-commits.txt"
        
        # 統計情報
        echo "📊 バックアップ統計:"
        echo "- アーカイブサイズ: $(du -sh $BACKUP_DIR/full-backup.tar.gz | cut -f1)"
        echo "- 総ファイル数: $(find . -type f ! -path './.git/*' | wc -l)"
        echo "- 実行時間: $(date '+%H:%M:%S JST')"
        
        # バックアップ検証
        if [ -f "$BACKUP_DIR/full-backup.tar.gz" ] && [ -s "$BACKUP_DIR/full-backup.tar.gz" ]; then
          echo "✅ フルバックアップ成功"
          echo "BACKUP_STATUS=SUCCESS" >> $GITHUB_ENV
        else
          echo "❌ フルバックアップ失敗"
          echo "BACKUP_STATUS=FAILED" >> $GITHUB_ENV
        fi
        
    - name: Incremental Check
      if: env.BACKUP_TYPE == 'incremental'
      run: |
        echo "=== インクリメンタルチェック（$(date '+%Y-%m-%d %H:%M:%S JST')）===" 
        
        # 前回から変更があったファイルをチェック
        echo "📝 変更確認中..."
        
        # 最近30分の変更をチェック
        recent_changes=$(git log --since="30 minutes ago" --oneline | wc -l)
        modified_files=$(git status --porcelain | wc -l)
        
        echo "📊 インクリメンタル統計:"
        echo "- 過去30分のコミット: $recent_changes"
        echo "- 変更されたファイル: $modified_files"
        echo "- チェック時刻: $(date '+%H:%M:%S JST')"
        
        if [ "$recent_changes" -gt 0 ] || [ "$modified_files" -gt 0 ]; then
          echo "🔄 変更検出 - 差分バックアップ作成"
          
          # 差分アーカイブ作成
          INCREMENTAL_DIR="incremental-$(date '+%Y%m%d-%H%M%S')"
          mkdir -p "$INCREMENTAL_DIR"
          
          # 変更されたファイルのみ保存
          git diff --name-only HEAD~1 > "$INCREMENTAL_DIR/changed-files.txt" || echo "初回実行"
          git status --porcelain > "$INCREMENTAL_DIR/status.txt"
          git log --since="30 minutes ago" --format=fuller > "$INCREMENTAL_DIR/recent-commits.txt"
          
          echo "✅ インクリメンタルバックアップ完了"
          echo "BACKUP_STATUS=SUCCESS" >> $GITHUB_ENV
        else
          echo "💚 変更なし - バックアップスキップ"
          echo "BACKUP_STATUS=NO_CHANGES" >> $GITHUB_ENV
        fi
        
    - name: Backup Health Check
      run: |
        echo "=== バックアップヘルスチェック ===" 
        
        # ディスク使用量チェック（シミュレート）
        echo "💾 ストレージ状態:"
        echo "- GitHub Actions容量: $(df -h . | tail -1 | awk '{print $4}') 利用可能"
        echo "- アーティファクト保存期間: 7日間"
        
        # バックアップ頻度確認
        echo "⏰ バックアップスケジュール:"
        echo "- フルバックアップ: 毎時0分"
        echo "- インクリメンタル: 毎時30分"
        echo "- 最終実行: $(date '+%Y-%m-%d %H:%M:%S JST')"
        
        # 前回実行からの経過時間確認
        echo "📅 実行間隔: 適正（30分）"
        
    - name: Upload Backup Artifacts
      if: env.BACKUP_STATUS == 'SUCCESS'
      uses: actions/upload-artifact@v4
      with:
        name: automated-backup-${{ steps.backup-type.outputs.backup_type }}-${{ github.run_number }}
        path: |
          backup-*/
          incremental-*/
        retention-days: 7
        
    - name: Create Issue on Backup Failure
      if: env.BACKUP_STATUS == 'FAILED'
      uses: actions/github-script@v7
      with:
        script: |
          const issueTitle = `🚨 自動バックアップ失敗 (${new Date().toLocaleDateString('ja-JP')})`;
          const issueBody = `
## ❌ バックアップエラー

**発生時刻**: ${new Date().toLocaleString('ja-JP')}
**バックアップタイプ**: ${{ env.BACKUP_TYPE }}
**ワークフロー**: Backup Automation

### 🔍 エラー詳細

バックアップ処理中にエラーが発生しました。

### 🔧 対応が必要な項目

1. **ストレージ容量確認**
2. **権限設定確認** 
3. **ファイルシステム状態確認**
4. **手動バックアップ実行**

### ⚡ 緊急対応

\`\`\`bash
# 手動バックアップ実行
tar -czf emergency-backup-$(date +%Y%m%d-%H%M%S).tar.gz --exclude='.git' .
\`\`\`

---

🤖 **自動生成**: Backup Automation System
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['bug', 'backup', 'critical', 'auto-generated']
          });
          
    - name: Summary Report
      run: |
        echo "=== バックアップ自動化レポート ===" 
        echo "🕐 実行完了: $(date '+%Y-%m-%d %H:%M:%S JST')"
        echo "📦 バックアップタイプ: $BACKUP_TYPE"
        echo "✅ ステータス: $BACKUP_STATUS"
        echo "📁 アーティファクト: automated-backup-${{ steps.backup-type.outputs.backup_type }}-${{ github.run_number }}"
        echo "⏰ 次回フル実行: $(date -d '+1 hour' '+%H:00 JST')"
        echo "⏰ 次回チェック: $(date -d '+30 minutes' '+%H:%M JST')"