name: Quality Gate

on:
  workflow_run:
    workflows: ["News Delivery System CI/CD"]
    types:
      - completed

jobs:
  quality-gate-evaluation:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'cancelled'
    
    steps:
    - name: Download workflow artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: ${{ github.event.workflow_run.id }}
          });
          
          console.log('Available artifacts:', artifacts.data.artifacts.map(a => a.name));
          
          const downloadArtifact = async (artifactName) => {
            const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == artifactName
            })[0];
            
            if (!matchArtifact) {
              console.log('Artifact ' + artifactName + ' not found');
              return null;
            }
            
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            
            const fs = require('fs');
            fs.writeFileSync('' + artifactName + '.zip', Buffer.from(download.data));
            return true;
          };
          
          // Download available artifacts
          await downloadArtifact('security-scan-results');
          await downloadArtifact('vulnerability-scan-results');
          await downloadArtifact('coverage-report-3.12');
          
    - name: Extract and analyze artifacts
      run: |
        mkdir -p analysis/
        
        # Extract artifacts if they exist
        for zip in *.zip; do
          if [ -f "$zip" ]; then
            echo "Extracting $zip"
            unzip -q "$zip" -d "analysis/$(basename "$zip" .zip)/" 2>/dev/null || echo "Failed to extract $zip"
          fi
        done
        
        ls -la analysis/ || echo "No analysis directory created"
        
    - name: Evaluate Quality Metrics
      id: quality-check
      run: |
        echo "=== QUALITY GATE EVALUATION ===" 
        
        # Initialize quality metrics
        QUALITY_SCORE=0
        ISSUES_FOUND=0
        CRITICAL_ISSUES=0
        
        # Check security scan results
        if [ -f "analysis/security-scan-results/bandit-report.json" ]; then
          SECURITY_ISSUES=$(python3 -c "
        import json, sys
        try:
          with open('analysis/security-scan-results/bandit-report.json', 'r') as f:
            data = json.load(f)
            high_severity = len([r for r in data.get('results', []) if r.get('issue_severity') == 'HIGH'])
            medium_severity = len([r for r in data.get('results', []) if r.get('issue_severity') == 'MEDIUM'])
            print(f'{high_severity},{medium_severity}')
        except:
          print('0,0')
        ")
          HIGH_SEC=$(echo $SECURITY_ISSUES | cut -d',' -f1)
          MED_SEC=$(echo $SECURITY_ISSUES | cut -d',' -f2)
          
          echo "Security Issues Found: High=$HIGH_SEC, Medium=$MED_SEC"
          ISSUES_FOUND=$((ISSUES_FOUND + HIGH_SEC + MED_SEC))
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + HIGH_SEC))
        else
          echo "No security scan results found"
        fi
        
        # Check vulnerability scan results  
        if [ -f "analysis/vulnerability-scan-results/safety-report.json" ]; then
          VULN_ISSUES=$(python3 -c "
        import json, sys
        try:
          with open('analysis/vulnerability-scan-results/safety-report.json', 'r') as f:
            data = json.load(f)
            vulns = len(data.get('vulnerabilities', []))
            print(vulns)
        except:
          print('0')
        ")
          echo "Vulnerability Issues Found: $VULN_ISSUES"
          ISSUES_FOUND=$((ISSUES_FOUND + VULN_ISSUES))
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + VULN_ISSUES))
        else
          echo "No vulnerability scan results found"
        fi
        
        # Evaluate overall quality gate
        if [ $CRITICAL_ISSUES -eq 0 ] && [ $ISSUES_FOUND -le 5 ]; then
          QUALITY_GATE="PASSED"
          QUALITY_SCORE=100
        elif [ $CRITICAL_ISSUES -eq 0 ] && [ $ISSUES_FOUND -le 10 ]; then
          QUALITY_GATE="WARNING"  
          QUALITY_SCORE=75
        else
          QUALITY_GATE="FAILED"
          QUALITY_SCORE=25
        fi
        
        # Set outputs
        echo "quality_gate=$QUALITY_GATE" >> $GITHUB_OUTPUT
        echo "quality_score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
        echo "total_issues=$ISSUES_FOUND" >> $GITHUB_OUTPUT
        echo "critical_issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
        
        echo "=== QUALITY GATE RESULT ==="
        echo "Status: $QUALITY_GATE"
        echo "Score: $QUALITY_SCORE/100"
        echo "Total Issues: $ISSUES_FOUND"
        echo "Critical Issues: $CRITICAL_ISSUES"
        
    - name: Create Quality Gate Report
      run: |
        cat > quality-gate-report.md << 'EOF'
        # üîç Quality Gate Report
        
        **Build:** ${{ github.event.workflow_run.html_url }}
        **Commit:** ${{ github.event.workflow_run.head_sha }}
        **Branch:** ${{ github.event.workflow_run.head_branch }}
        **Timestamp:** $(date -u)
        
        ## üìä Overall Result
        
        | Metric | Result |
        |--------|--------|
        | **Quality Gate** | ${{ steps.quality-check.outputs.quality_gate }} |
        | **Quality Score** | ${{ steps.quality-check.outputs.quality_score }}/100 |
        | **Total Issues** | ${{ steps.quality-check.outputs.total_issues }} |
        | **Critical Issues** | ${{ steps.quality-check.outputs.critical_issues }} |
        
        ## üéØ Quality Standards
        
        ‚úÖ **Passed**: No critical issues, ‚â§ 5 total issues
        ‚ö†Ô∏è  **Warning**: No critical issues, ‚â§ 10 total issues  
        ‚ùå **Failed**: Critical issues present or > 10 total issues
        
        ## üìã Recommendations
        
        EOF
        
        if [ "${{ steps.quality-check.outputs.quality_gate }}" = "FAILED" ]; then
          cat >> quality-gate-report.md << 'EOF'
        
        ### üö® Critical Actions Required
        
        - Address all critical security vulnerabilities
        - Fix high-severity security issues
        - Review and resolve dependency vulnerabilities
        - **Deployment is blocked until issues are resolved**
        
        EOF
        elif [ "${{ steps.quality-check.outputs.quality_gate }}" = "WARNING" ]; then
          cat >> quality-gate-report.md << 'EOF'
        
        ### ‚ö†Ô∏è Improvements Recommended
        
        - Review and address medium-severity issues
        - Consider updating dependencies with known vulnerabilities
        - Monitor quality trends to prevent degradation
        
        EOF
        else
          cat >> quality-gate-report.md << 'EOF'
        
        ### ‚úÖ Quality Standards Met
        
        - All quality checks passed
        - No critical issues detected
        - Ready for deployment
        
        EOF
        fi
        
        echo "Quality Gate Report:"
        cat quality-gate-report.md
        
    - name: Comment on PR
      if: github.event.workflow_run.event == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-gate-report.md', 'utf8');
          
          // Find the PR number
          const pulls = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: '' + context.repo.owner + ':' + { github.event.workflow_run.head_branch  + '}',
            state: 'open'
          });
          
          if (pulls.data.length > 0) {
            const prNumber = pulls.data[0].number;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: report
            });
          }
          
    - name: Upload Quality Gate Report
      uses: actions/upload-artifact@v4
      with:
        name: quality-gate-report-${{ github.event.workflow_run.head_sha }}
        path: quality-gate-report.md
        
    - name: Set Quality Gate Status
      if: github.event.workflow_run.event == 'push'
      run: |
        if [ "${{ steps.quality-check.outputs.quality_gate }}" = "FAILED" ]; then
          echo "‚ùå Quality Gate Failed - Blocking deployment"
          exit 1
        elif [ "${{ steps.quality-check.outputs.quality_gate }}" = "WARNING" ]; then
          echo "‚ö†Ô∏è Quality Gate Warning - Deployment allowed with caution"
          exit 0
        else
          echo "‚úÖ Quality Gate Passed - Deployment approved"
          exit 0
        fi