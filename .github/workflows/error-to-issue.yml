name: Error to Issue Auto-Creation

on:
  workflow_run:
    workflows: ["*"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  actions: read

jobs:
  check-and-create-issue:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure'
    
    steps:
    - name: Check for existing issue
      id: check_issue
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'auto-generated,ci-failure',
            state: 'open'
          });
          
          const workflowName = '${{ github.event.workflow_run.name }}';
          const existingIssue = issues.find(issue => 
            issue.title.includes(workflowName)
          );
          
          if (existingIssue) {
            console.log(`Existing issue found: #${existingIssue.number}`);
            return existingIssue.number;
          }
          return null;
    
    - name: Create issue for failure
      if: steps.check_issue.outputs.result == 'null'
      uses: actions/github-script@v7
      with:
        script: |
          const workflowRun = context.payload.workflow_run;
          
          // Get workflow logs
          let errorDetails = '';
          try {
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowRun.id
            });
            
            const failedJobs = jobs.jobs.filter(job => job.conclusion === 'failure');
            if (failedJobs.length > 0) {
              errorDetails = failedJobs.map(job => {
                const failedSteps = job.steps.filter(step => step.conclusion === 'failure');
                return `### Job: ${job.name}\n` +
                  failedSteps.map(step => `- Step failed: ${step.name}`).join('\n');
              }).join('\n\n');
            }
          } catch (e) {
            console.log('Could not fetch job details:', e);
          }
          
          const issueBody = `## üö® Automated Issue: CI/CD Failure Detected
          
          **Workflow:** ${workflowRun.name}
          **Run ID:** ${workflowRun.id}
          **Branch:** ${workflowRun.head_branch}
          **Commit:** ${workflowRun.head_sha}
          **Failure Time:** ${new Date(workflowRun.updated_at).toISOString()}
          
          ### üìã Error Summary
          ${errorDetails || 'Error details could not be retrieved automatically.'}
          
          ### üîó Links
          - [Failed Workflow Run](${workflowRun.html_url})
          - [Commit](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${workflowRun.head_sha})
          
          ### ü§ñ Auto-Repair Status
          This issue was automatically created. The self-healing system will attempt to fix common issues.
          
          ### üìù Suggested Actions
          1. Review the workflow logs
          2. Check for environment/dependency issues
          3. Verify API keys and permissions
          4. Run tests locally to reproduce
          
          ---
          *This issue was automatically generated by the Error-to-Issue workflow*`;
          
          const { data: issue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üî¥ CI Failure: ${workflowRun.name} - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['auto-generated', 'ci-failure', 'bug', 'high-priority'],
            assignees: []
          });
          
          console.log(`Created issue #${issue.number}`);
          return issue.number;
    
    - name: Trigger self-healing
      if: steps.check_issue.outputs.result == 'null'
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          // Trigger self-healing workflow
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'self-heal.yml',
            ref: 'main',
            inputs: {
              issue_number: '${{ steps.create_issue.outputs.result }}',
              error_type: 'ci_failure'
            }
          });
          console.log('Self-healing workflow triggered');

  auto-repair-common-issues:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure'
    needs: check-and-create-issue
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Analyze and fix common issues
      run: |
        echo "Analyzing common CI/CD failures..."
        
        # Check for missing dependencies
        if [ -f "requirements.txt" ]; then
          echo "Checking Python dependencies..."
          pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir || true
        fi
        
        # Check for permission issues
        if [ -d ".github" ]; then
          echo "Checking file permissions..."
          find . -type f -name "*.sh" -exec chmod +x {} \;
          find . -type f -name "*.py" -exec chmod +r {} \;
        fi
        
        # Check environment variables
        echo "Checking environment configuration..."
        if [ ! -f ".env" ] && [ -f ".env.example" ]; then
          cp .env.example .env
          echo "Created .env from example"
        fi
    
    - name: Comment on issue with findings
      if: needs.check-and-create-issue.outputs.issue_number
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumber = ${{ needs.check-and-create-issue.outputs.issue_number }};
          if (issueNumber) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## üîß Auto-Repair Attempt
              
              The self-healing system has analyzed the failure and attempted the following fixes:
              - ‚úÖ Checked and updated dependencies
              - ‚úÖ Fixed file permissions
              - ‚úÖ Verified environment configuration
              
              Please re-run the workflow to see if the issue is resolved.`
            });
          }