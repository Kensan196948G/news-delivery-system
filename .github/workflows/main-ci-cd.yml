name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # 毎日深夜3時に定期実行（システムヘルスチェック）
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      emergency_fix:
        description: 'Emergency fix mode'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  
jobs:
  # ========================================
  # 1. コード品質チェック
  # ========================================
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run linting
        id: lint
        continue-on-error: true
        run: |
          pip install ruff black isort
          echo "::group::Running Ruff"
          ruff check src/ tests/ --format=github
          echo "::endgroup::"
          
          echo "::group::Running Black"
          black --check src/ tests/
          echo "::endgroup::"
          
          echo "::group::Running isort"
          isort --check-only src/ tests/
          echo "::endgroup::"
      
      - name: Auto-fix linting issues
        if: steps.lint.outcome == 'failure' && github.event_name == 'push'
        run: |
          echo "Attempting to auto-fix linting issues..."
          ruff check src/ tests/ --fix
          black src/ tests/
          isort src/ tests/
          
          # Check if there are changes
          if [[ -n $(git status -s) ]]; then
            echo "LINT_FIXED=true" >> $GITHUB_ENV
          fi
      
      - name: Type checking
        run: |
          pip install mypy types-requests types-aiohttp
          mypy src/ --ignore-missing-imports --no-strict-optional
      
      - name: Security scan
        run: |
          pip install bandit safety
          echo "::group::Running Bandit"
          bandit -r src/ -ll
          echo "::endgroup::"
          
          echo "::group::Running Safety"
          safety check --json
          echo "::endgroup::"

  # ========================================
  # 2. テスト実行
  # ========================================
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: quality-check
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run unit tests
        run: |
          pytest tests/test_integration.py -v --cov=src --cov-report=xml --cov-report=html
      
      - name: Run integration tests
        run: |
          pytest tests/ -v -m "not slow" --maxfail=3
      
      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            .coverage
            coverage.xml

  # ========================================
  # 3. ビルド＆パッケージング
  # ========================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Build distribution
        run: |
          pip install build wheel
          python -m build
      
      - name: Check distribution
        run: |
          pip install twine
          twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/

  # ========================================
  # 4. 自動エラー修復
  # ========================================
  auto-fix:
    name: Auto Fix Issues
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    if: failure() && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run auto-fix script
        id: autofix
        run: |
          echo "Running comprehensive auto-fix..."
          
          # Import path fixes
          python scripts/fix_imports.py || true
          
          # Type annotation fixes
          python scripts/fix_type_hints.py || true
          
          # Dependency fixes
          python scripts/fix_dependencies.py || true
          
          # Configuration fixes
          python scripts/fix_config.py || true
          
          # Check for changes
          if [[ -n $(git status -s) ]]; then
            echo "AUTO_FIXED=true" >> $GITHUB_ENV
            echo "fixes_applied=true" >> $GITHUB_OUTPUT
          else
            echo "fixes_applied=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create fix commit
        if: env.AUTO_FIXED == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "🔧 Auto-fix: Apply automatic fixes
          
          - Fixed linting issues
          - Fixed import errors
          - Fixed type hints
          - Updated dependencies
          
          [skip ci]"
      
      - name: Push fixes
        if: env.AUTO_FIXED == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  # ========================================
  # 5. デプロイメント準備
  # ========================================
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Generate deployment manifest
        run: |
          cat > deployment-manifest.json << EOF
          {
            "version": "$(git describe --tags --always)",
            "commit": "${{ github.sha }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "${{ github.ref_name }}",
            "run_id": "${{ github.run_id }}",
            "run_number": "${{ github.run_number }}"
          }
          EOF
      
      - name: Validate configuration
        run: |
          python -c "
          import json
          from pathlib import Path
          
          config_path = Path('config/config.json')
          if config_path.exists():
              with open(config_path) as f:
                  config = json.load(f)
              print('✅ Configuration validated')
          else:
              print('⚠️ Configuration file not found')
          "
      
      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r src/ deployment/
          cp -r config/ deployment/
          cp -r templates/ deployment/
          cp requirements.txt deployment/
          cp deployment-manifest.json deployment/
          
          tar -czf deployment-package.tar.gz deployment/
      
      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment-package.tar.gz

  # ========================================
  # 6. 健全性チェック
  # ========================================
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    if: github.event.schedule || github.event.inputs.emergency_fix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run health monitor
        run: |
          python -c "
          import asyncio
          import sys
          sys.path.insert(0, 'src')
          from monitoring.health_monitor import HealthMonitor
          
          async def check():
              monitor = HealthMonitor()
              status = await monitor.perform_health_check()
              print(f'Overall health: {status.get(\"overall_health\")}')
              if status.get('issues'):
                  print(f'Issues found: {status[\"issues\"]}')
              return status.get('overall_health') == 'healthy'
          
          healthy = asyncio.run(check())
          sys.exit(0 if healthy else 1)
          "
      
      - name: Create health report
        if: always()
        run: |
          python -c "
          import json
          from datetime import datetime
          
          report = {
              'timestamp': datetime.now().isoformat(),
              'workflow_run': '${{ github.run_id }}',
              'status': 'healthy' if '${{ job.status }}' == 'success' else 'unhealthy'
          }
          
          with open('health-report.json', 'w') as f:
              json.dump(report, f, indent=2)
          "
      
      - name: Upload health report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: health-report
          path: health-report.json

  # ========================================
  # 7. 通知
  # ========================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [quality-check, test, build]
    if: always()
    
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.quality-check.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          fi
      
      - name: Create summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # CI/CD Pipeline Summary ${{ steps.status.outputs.emoji }}
          
          ## Results
          - **Quality Check**: ${{ needs.quality-check.result }}
          - **Tests**: ${{ needs.test.result }}
          - **Build**: ${{ needs.build.result }}
          
          ## Details
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Triggered by**: ${{ github.actor }}
          - **Workflow run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          EOF