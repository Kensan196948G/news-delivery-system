name: Continuous Monitoring

on:
  schedule:
    # 1時間おきに実行 (新仕様: 1時間以内検知保証)
    - cron: '0 * * * *'
    # 完全自動フローと連携
  
  workflow_dispatch: # 手動実行可能
    inputs:
      check_type:
        description: '監視タイプ選択'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - security
        - health
        - backup

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  continuous-health-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install monitoring dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pyyaml python-dotenv
        
    - name: System Health Check
      id: health-check
      run: |
        echo "=== システムヘルスチェック（$(date '+%Y-%m-%d %H:%M:%S JST')）===" 
        
        # GitHubリポジトリ統計
        echo "## リポジトリ統計" >> health-report.md
        echo "- 実行時刻: $(date '+%Y-%m-%d %H:%M:%S JST')" >> health-report.md
        echo "- コミット数: $(git rev-list --count HEAD)" >> health-report.md
        echo "- ブランチ数: $(git branch -r | wc -l)" >> health-report.md
        echo "" >> health-report.md
        
        # ファイル健全性チェック
        echo "## ファイル健全性" >> health-report.md
        
        # 重要設定ファイルの存在確認
        critical_files=(
          "requirements.txt"
          "requirements-minimal.txt" 
          ".github/workflows/ci-cd.yml"
          "src/main.py"
          "docs/システム概要.md"
        )
        
        missing_files=()
        for file in "${critical_files[@]}"; do
          if [ -f "$file" ]; then
            echo "- ✅ $file: 存在" >> health-report.md
          else
            echo "- ❌ $file: 不足" >> health-report.md
            missing_files+=("$file")
          fi
        done
        
        # 依存関係チェック
        echo "" >> health-report.md
        echo "## 依存関係状態" >> health-report.md
        if [ -f "requirements.txt" ]; then
          total_deps=$(grep -c "^[^#]" requirements.txt || echo "0")
          echo "- 総依存パッケージ数: $total_deps" >> health-report.md
        fi
        
        # 健全性スコア計算
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "HEALTH_STATUS=HEALTHY" >> $GITHUB_ENV
          echo "- 🟢 **システム状態: 正常**" >> health-report.md
        else
          echo "HEALTH_STATUS=WARNING" >> $GITHUB_ENV
          echo "- 🟡 **システム状態: 注意が必要**" >> health-report.md
        fi
        
        cat health-report.md
        
    - name: Quick Security Scan
      if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security' || github.event.schedule
      run: |
        echo "=== クイックセキュリティスキャン ===" 
        
        # Safety - 既知の脆弱性チェック（高速）
        pip install safety
        safety check --short-report --json > safety-quick.json || echo "脆弱性検出または確認完了"
        
        # 設定ファイルセキュリティチェック
        echo "## セキュリティチェック結果" >> health-report.md
        echo "- Safety実行: ✅" >> health-report.md
        echo "- 実行時刻: $(date '+%H:%M JST')" >> health-report.md
        
        # 危険なパターンの簡易チェック
        if grep -r "password.*=" . --include="*.py" --exclude-dir=".git" | head -5; then
          echo "- ⚠️ ハードコードされた認証情報の可能性を検出" >> health-report.md
        else
          echo "- ✅ 明らかな認証情報ハードコードなし" >> health-report.md
        fi
        
    - name: Backup Status Check
      if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'backup' || github.event.schedule
      run: |
        echo "=== バックアップ状態確認 ===" 
        
        echo "" >> health-report.md
        echo "## バックアップ状態" >> health-report.md
        echo "- 最終チェック: $(date '+%Y-%m-%d %H:%M JST')" >> health-report.md
        
        # Gitコミット状態確認
        last_commit=$(git log -1 --format="%h - %s (%cr)")
        echo "- 最新コミット: $last_commit" >> health-report.md
        
        # リモート同期状態
        git fetch origin main
        local_commits=$(git rev-list HEAD --count)
        remote_commits=$(git rev-list origin/main --count)
        
        if [ "$local_commits" -eq "$remote_commits" ]; then
          echo "- 🟢 リモート同期: 最新" >> health-report.md
        else
          echo "- 🟡 リモート同期: 差分あり (ローカル:$local_commits, リモート:$remote_commits)" >> health-report.md
        fi
        
    - name: Trigger Auto-Repair if Problems Detected
      if: env.HEALTH_STATUS == 'WARNING' || env.HEALTH_STATUS == 'CRITICAL'
      uses: actions/github-script@v7
      with:
        script: |
          console.log('🔧 問題検出 - 自動修復サイクルをトリガー');
          
          // 自動修復ワークフローを起動
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'auto-repair-cycle.yml',
            ref: 'main',
            inputs: {
              repair_type: 'auto'
            }
          });
          
          console.log('✅ 自動修復サイクル開始 - メール配信なし');
          
    - name: Upload Health Report
      uses: actions/upload-artifact@v4
      with:
        name: health-report-${{ github.run_number }}
        path: |
          health-report.md
          safety-quick.json
        retention-days: 7
        
    - name: Notification Summary
      run: |
        echo "=== 継続的監視完了 ===" 
        echo "🕐 実行時刻: $(date '+%Y-%m-%d %H:%M:%S JST')"
        echo "📊 システム状態: $HEALTH_STATUS"
        echo "📁 レポート: health-report-${{ github.run_number }}"
        echo "⏰ 次回実行: 30分後"