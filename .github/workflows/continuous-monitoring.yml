name: Continuous Monitoring

on:
  schedule:
    # 30分おきに実行 (毎時0分と30分)
    - cron: '0,30 * * * *'
    # 代替オプション: 1時間おきの場合は以下を使用
    # - cron: '0 * * * *'
  
  workflow_dispatch: # 手動実行可能
    inputs:
      check_type:
        description: '監視タイプ選択'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - security
        - health
        - backup

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  continuous-health-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install monitoring dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pyyaml python-dotenv
        
    - name: System Health Check
      id: health-check
      run: |
        echo "=== システムヘルスチェック（$(date '+%Y-%m-%d %H:%M:%S JST')）===" 
        
        # GitHubリポジトリ統計
        echo "## リポジトリ統計" >> health-report.md
        echo "- 実行時刻: $(date '+%Y-%m-%d %H:%M:%S JST')" >> health-report.md
        echo "- コミット数: $(git rev-list --count HEAD)" >> health-report.md
        echo "- ブランチ数: $(git branch -r | wc -l)" >> health-report.md
        echo "" >> health-report.md
        
        # ファイル健全性チェック
        echo "## ファイル健全性" >> health-report.md
        
        # 重要設定ファイルの存在確認
        critical_files=(
          "requirements.txt"
          "requirements-minimal.txt" 
          ".github/workflows/ci-cd.yml"
          "src/main.py"
          "docs/システム概要.md"
        )
        
        missing_files=()
        for file in "${critical_files[@]}"; do
          if [ -f "$file" ]; then
            echo "- ✅ $file: 存在" >> health-report.md
          else
            echo "- ❌ $file: 不足" >> health-report.md
            missing_files+=("$file")
          fi
        done
        
        # 依存関係チェック
        echo "" >> health-report.md
        echo "## 依存関係状態" >> health-report.md
        if [ -f "requirements.txt" ]; then
          total_deps=$(grep -c "^[^#]" requirements.txt || echo "0")
          echo "- 総依存パッケージ数: $total_deps" >> health-report.md
        fi
        
        # 健全性スコア計算
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "HEALTH_STATUS=HEALTHY" >> $GITHUB_ENV
          echo "- 🟢 **システム状態: 正常**" >> health-report.md
        else
          echo "HEALTH_STATUS=WARNING" >> $GITHUB_ENV
          echo "- 🟡 **システム状態: 注意が必要**" >> health-report.md
        fi
        
        cat health-report.md
        
    - name: Quick Security Scan
      if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security' || github.event.schedule
      run: |
        echo "=== クイックセキュリティスキャン ===" 
        
        # Safety - 既知の脆弱性チェック（高速）
        pip install safety
        safety check --short-report --json > safety-quick.json || echo "脆弱性検出または確認完了"
        
        # 設定ファイルセキュリティチェック
        echo "## セキュリティチェック結果" >> health-report.md
        echo "- Safety実行: ✅" >> health-report.md
        echo "- 実行時刻: $(date '+%H:%M JST')" >> health-report.md
        
        # 危険なパターンの簡易チェック
        if grep -r "password.*=" . --include="*.py" --exclude-dir=".git" | head -5; then
          echo "- ⚠️ ハードコードされた認証情報の可能性を検出" >> health-report.md
        else
          echo "- ✅ 明らかな認証情報ハードコードなし" >> health-report.md
        fi
        
    - name: Backup Status Check
      if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'backup' || github.event.schedule
      run: |
        echo "=== バックアップ状態確認 ===" 
        
        echo "" >> health-report.md
        echo "## バックアップ状態" >> health-report.md
        echo "- 最終チェック: $(date '+%Y-%m-%d %H:%M JST')" >> health-report.md
        
        # Gitコミット状態確認
        last_commit=$(git log -1 --format="%h - %s (%cr)")
        echo "- 最新コミット: $last_commit" >> health-report.md
        
        # リモート同期状態
        git fetch origin main
        local_commits=$(git rev-list HEAD --count)
        remote_commits=$(git rev-list origin/main --count)
        
        if [ "$local_commits" -eq "$remote_commits" ]; then
          echo "- 🟢 リモート同期: 最新" >> health-report.md
        else
          echo "- 🟡 リモート同期: 差分あり (ローカル:$local_commits, リモート:$remote_commits)" >> health-report.md
        fi
        
    - name: Create Auto-Issue if Problems Detected
      if: env.HEALTH_STATUS == 'WARNING' || env.HEALTH_STATUS == 'CRITICAL'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let reportContent = '';
          
          try {
            reportContent = fs.readFileSync('health-report.md', 'utf8');
          } catch (error) {
            reportContent = 'レポート読み込みエラー';
          }
          
          const issueTitle = `🚨 自動監視: システム異常検出 (${new Date().toLocaleDateString('ja-JP')})`;
          const issueBody = `
## 🔍 自動監視結果

**検出時刻**: ${new Date().toLocaleString('ja-JP')}
**監視タイプ**: 継続的システム監視（30分間隔）
**状態**: ⚠️ 注意が必要

### 📊 詳細レポート

\`\`\`
${reportContent}
\`\`\`

### 🔧 推奨アクション

1. **即座に確認**: 不足ファイルの復旧
2. **依存関係更新**: セキュリティパッチ適用
3. **設定確認**: 重要設定の検証

### 🤖 自動化情報

- **検出方法**: 継続的監視ワークフロー
- **頻度**: 30分おき
- **次回チェック**: 約30分後

---

🤖 **自動生成**: Continuous Monitoring System
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['bug', 'monitoring', 'auto-generated', 'high-priority']
          });
          
    - name: Upload Health Report
      uses: actions/upload-artifact@v4
      with:
        name: health-report-${{ github.run_number }}
        path: |
          health-report.md
          safety-quick.json
        retention-days: 7
        
    - name: Notification Summary
      run: |
        echo "=== 継続的監視完了 ===" 
        echo "🕐 実行時刻: $(date '+%Y-%m-%d %H:%M:%S JST')"
        echo "📊 システム状態: $HEALTH_STATUS"
        echo "📁 レポート: health-report-${{ github.run_number }}"
        echo "⏰ 次回実行: 30分後"