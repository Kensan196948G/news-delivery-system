name: 🔄 7x Infinite Auto Repair Loop System
# 7回ループ→30分待機を永続的に繰り返す自動修復システム

on:
  # 自動実行1: 30分ごとの定期チェック
  schedule:
    - cron: '*/30 * * * *'
  
  # 自動実行2: ワークフロー失敗時に自動起動
  workflow_run:
    workflows:
      - "CI Pipeline"
      - "Security Check"
      - "Test Suite"
    types: [completed]
  
  # 自動実行3: Issue操作時に自動起動
  issues:
    types: [opened, closed, labeled, unlabeled]
  
  # 手動実行（デバッグ用）
  workflow_dispatch:
    inputs:
      force_repair:
        description: '強制修復実行'
        required: false
        default: false
        type: boolean
      target_issue:
        description: '対象Issue番号'
        required: false
        type: string

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

env:
  MAX_ATTEMPTS_PER_CYCLE: 7
  COOLDOWN_MINUTES: 30
  # 無限ループ設定 - エスカレーションなしで永続的に実行
  REPAIR_LABEL: 'auto-repair-7x'
  IN_PROGRESS_LABEL: 'repair-in-progress'
  COMPLETED_LABEL: 'repair-completed'

jobs:
  # ジョブ1: エラー検知とIssue作成
  detect-and-create-issue:
    name: 🔍 Detect Errors and Create Issue
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'failure'
    
    outputs:
      issue_number: ${{ steps.create-issue.outputs.issue_number }}
      should_repair: ${{ steps.check-repair.outputs.should_repair }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔍 Check for existing issues
      id: check-existing
      run: |
        # 既存の修復中Issueをチェック
        EXISTING_ISSUES=$(gh issue list \
          --label "${{ env.REPAIR_LABEL }}" \
          --state open \
          --json number,title,labels \
          --jq '.[] | select(.labels[].name == "${{ env.IN_PROGRESS_LABEL }}") | .number')
        
        if [ -n "$EXISTING_ISSUES" ]; then
          echo "existing_issue=$EXISTING_ISSUES" >> $GITHUB_OUTPUT
          echo "has_existing=true" >> $GITHUB_OUTPUT
        else
          echo "has_existing=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📝 Create repair issue
      id: create-issue
      if: steps.check-existing.outputs.has_existing != 'true'
      run: |
        # エラー情報を収集
        WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
        WORKFLOW_URL="${{ github.event.workflow_run.html_url }}"
        ERROR_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        # Issue本文を作成
        ISSUE_BODY=$(cat << EOF
        ## 🚨 自動修復タスク（無限ループモード）
        
        **検出されたエラー:**
        - ワークフロー: $WORKFLOW_NAME
        - 失敗リンク: $WORKFLOW_URL
        - 検出時刻: $ERROR_TIME
        
        ## 📊 修復ステータス
        
        ### 現在のサイクル情報
        - サイクル番号: 1
        - 開始時刻: $ERROR_TIME
        - 状態: 実行中
        
        ### 試行カウンター
        - 現在のサイクル内試行: 0/7
        - 総試行回数: 0
        - 成功回数: 0
        - 失敗回数: 0
        
        ## 🔄 無限ループ設定
        このIssueは7回の修復試行後、30分の待機を挟んで自動的に次のサイクルを開始します。
        修復が成功するまで、または手動でクローズされるまで無限に継続します。
        
        ## 📝 修復ログ
        
        | 時刻 | サイクル | 試行 | 結果 | 詳細 |
        |------|---------|------|------|------|
        EOF
        )
        
        # Issueを作成
        ISSUE_NUMBER=$(gh issue create \
          --title "🔧 Auto Repair [∞ Loop]: $WORKFLOW_NAME failure" \
          --body "$ISSUE_BODY" \
          --label "${{ env.REPAIR_LABEL }}" \
          --label "${{ env.IN_PROGRESS_LABEL }}" \
          --assignee "${{ github.repository_owner }}" \
          | grep -oE '[0-9]+')
        
        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "✅ Created repair issue #$ISSUE_NUMBER"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🎯 Set repair flag
      id: check-repair
      run: |
        if [ "${{ steps.check-existing.outputs.has_existing }}" == "true" ]; then
          echo "should_repair=false" >> $GITHUB_OUTPUT
        else
          echo "should_repair=true" >> $GITHUB_OUTPUT
        fi

  # ジョブ2: 修復ループ実行
  execute-repair-loop:
    name: 🔧 Execute Infinite Repair Loop
    runs-on: ubuntu-latest
    needs: [detect-and-create-issue]
    if: |
      always() && (
        needs.detect-and-create-issue.outputs.should_repair == 'true' ||
        github.event_name == 'schedule' ||
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'auto-repair-7x'))
      )
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 📦 Install dependencies
      run: |
        pip install PyYAML requests

    - name: 🔍 Find target issue
      id: find-issue
      run: |
        if [ "${{ github.event_name }}" == "issues" ]; then
          ISSUE_NUMBER="${{ github.event.issue.number }}"
        elif [ -n "${{ needs.detect-and-create-issue.outputs.issue_number }}" ]; then
          ISSUE_NUMBER="${{ needs.detect-and-create-issue.outputs.issue_number }}"
        elif [ -n "${{ github.event.inputs.target_issue }}" ]; then
          ISSUE_NUMBER="${{ github.event.inputs.target_issue }}"
        else
          # 最も古い未解決のrepair issueを取得
          ISSUE_NUMBER=$(gh issue list \
            --label "${{ env.REPAIR_LABEL }}" \
            --label "${{ env.IN_PROGRESS_LABEL }}" \
            --state open \
            --json number,createdAt \
            --jq 'sort_by(.createdAt) | .[0].number')
        fi
        
        if [ -z "$ISSUE_NUMBER" ]; then
          echo "No repair issues found"
          echo "has_issue=false" >> $GITHUB_OUTPUT
        else
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "has_issue=true" >> $GITHUB_OUTPUT
          echo "📋 Working on issue #$ISSUE_NUMBER"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📊 Check repair state
      id: check-state
      if: steps.find-issue.outputs.has_issue == 'true'
      run: |
        ISSUE_NUMBER="${{ steps.find-issue.outputs.issue_number }}"
        
        # Issue本文から現在の状態を解析
        ISSUE_BODY=$(gh issue view $ISSUE_NUMBER --json body --jq '.body')
        
        # 状態情報を抽出
        CURRENT_CYCLE=$(echo "$ISSUE_BODY" | grep "サイクル番号:" | head -1 | grep -oE '[0-9]+' || echo "1")
        ATTEMPT_IN_CYCLE=$(echo "$ISSUE_BODY" | grep "現在のサイクル内試行:" | head -1 | grep -oE '[0-9]+' | head -1 || echo "0")
        TOTAL_ATTEMPTS=$(echo "$ISSUE_BODY" | grep "総試行回数:" | head -1 | grep -oE '[0-9]+' || echo "0")
        
        # 次の試行番号を計算
        NEXT_ATTEMPT_IN_CYCLE=$(( ($ATTEMPT_IN_CYCLE % ${{ env.MAX_ATTEMPTS_PER_CYCLE }}) + 1 ))
        
        # 最後の修復時刻を取得
        LAST_ATTEMPT=$(gh issue view $ISSUE_NUMBER --json comments --jq '.comments[-1].createdAt // ""')
        
        # クールダウンチェック（サイクル完了後）
        if [ -n "$LAST_ATTEMPT" ] && [ "$ATTEMPT_IN_CYCLE" -eq "${{ env.MAX_ATTEMPTS_PER_CYCLE }}" ]; then
          LAST_TIMESTAMP=$(date -d "$LAST_ATTEMPT" +%s)
          CURRENT_TIMESTAMP=$(date +%s)
          ELAPSED_MINUTES=$(( ($CURRENT_TIMESTAMP - $LAST_TIMESTAMP) / 60 ))
          
          if [ "$ELAPSED_MINUTES" -lt "${{ env.COOLDOWN_MINUTES }}" ]; then
            REMAINING=$(( ${{ env.COOLDOWN_MINUTES }} - $ELAPSED_MINUTES ))
            echo "⏸️ In cooldown period. $REMAINING minutes remaining."
            echo "in_cooldown=true" >> $GITHUB_OUTPUT
            exit 0
          else
            # クールダウン終了、新しいサイクルを開始
            CURRENT_CYCLE=$((CURRENT_CYCLE + 1))
            NEXT_ATTEMPT_IN_CYCLE=1
            echo "🔄 Starting new cycle #$CURRENT_CYCLE after cooldown"
          fi
        fi
        
        echo "current_cycle=$CURRENT_CYCLE" >> $GITHUB_OUTPUT
        echo "attempt_in_cycle=$NEXT_ATTEMPT_IN_CYCLE" >> $GITHUB_OUTPUT
        echo "total_attempts=$TOTAL_ATTEMPTS" >> $GITHUB_OUTPUT
        echo "in_cooldown=false" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: ⏸️ Wait for cooldown
      if: steps.check-state.outputs.in_cooldown == 'true'
      run: |
        echo "Repair is in cooldown period. Exiting..."
        exit 0
    
    - name: 🔧 Execute repair attempt
      id: repair
      if: |
        steps.find-issue.outputs.has_issue == 'true' &&
        steps.check-state.outputs.in_cooldown != 'true'
      timeout-minutes: 5
      run: |
        ISSUE_NUMBER="${{ steps.find-issue.outputs.issue_number }}"
        CURRENT_CYCLE="${{ steps.check-state.outputs.current_cycle }}"
        ATTEMPT_IN_CYCLE="${{ steps.check-state.outputs.attempt_in_cycle }}"
        TOTAL_ATTEMPTS="${{ steps.check-state.outputs.total_attempts }}"
        
        echo "🔧 Executing repair attempt (Total: $((TOTAL_ATTEMPTS + 1)), Cycle $CURRENT_CYCLE, Attempt $ATTEMPT_IN_CYCLE/7)"
        
        # 修復スクリプトを実行（存在する場合）
        if [ -f "scripts/repair-loop-executor.py" ]; then
          python scripts/repair-loop-executor.py \
            --issue-number "$ISSUE_NUMBER" \
            --cycle "$CURRENT_CYCLE" \
            --attempt "$ATTEMPT_IN_CYCLE" \
            --total "$((TOTAL_ATTEMPTS + 1))"
          REPAIR_RESULT=$?
        else
          # デモ用の修復試行（実際の修復ロジックに置き換える）
          echo "Running repair logic..."
          # ここに実際の修復コマンドを追加
          # 例: npm test, pytest, make fix など
          REPAIR_RESULT=$((RANDOM % 2))  # デモ用のランダム結果
        fi
        
        if [ "$REPAIR_RESULT" -eq 0 ]; then
          echo "repair_success=true" >> $GITHUB_OUTPUT
          echo "✅ Repair attempt successful"
        else
          echo "repair_success=false" >> $GITHUB_OUTPUT
          echo "❌ Repair attempt failed"
        fi
    
    - name: 📝 Update issue status
      if: steps.find-issue.outputs.has_issue == 'true' && steps.repair.outcome != 'skipped'
      run: |
        ISSUE_NUMBER="${{ steps.find-issue.outputs.issue_number }}"
        CURRENT_CYCLE="${{ steps.check-state.outputs.current_cycle }}"
        ATTEMPT_IN_CYCLE="${{ steps.check-state.outputs.attempt_in_cycle }}"
        TOTAL_ATTEMPTS="${{ steps.check-state.outputs.total_attempts }}"
        REPAIR_SUCCESS="${{ steps.repair.outputs.repair_success }}"
        
        # Issue本文を取得
        ISSUE_BODY=$(gh issue view $ISSUE_NUMBER --json body --jq '.body')
        
        # ステータス更新
        ATTEMPT_NUMBER=$((TOTAL_ATTEMPTS + 1))
        if [ "$REPAIR_SUCCESS" == "true" ]; then
          RESULT_EMOJI="✅"
          RESULT_TEXT="成功"
        else
          RESULT_EMOJI="❌"
          RESULT_TEXT="失敗"
        fi
        
        # カウンターを更新
        NEW_BODY=$(echo "$ISSUE_BODY" | 
          sed "s/サイクル番号: [0-9]*/サイクル番号: $CURRENT_CYCLE/" |
          sed "s/現在のサイクル内試行: [0-9]*\/7/現在のサイクル内試行: $ATTEMPT_IN_CYCLE\/7/" |
          sed "s/総試行回数: [0-9]*/総試行回数: $ATTEMPT_NUMBER/")
        
        if [ "$REPAIR_SUCCESS" == "true" ]; then
          SUCCESS_COUNT=$(echo "$ISSUE_BODY" | grep "成功回数:" | grep -oE '[0-9]+' || echo "0")
          NEW_BODY=$(echo "$NEW_BODY" | sed "s/成功回数: [0-9]*/成功回数: $((SUCCESS_COUNT + 1))/")
        else
          FAIL_COUNT=$(echo "$ISSUE_BODY" | grep "失敗回数:" | grep -oE '[0-9]+' || echo "0")
          NEW_BODY=$(echo "$NEW_BODY" | sed "s/失敗回数: [0-9]*/失敗回数: $((FAIL_COUNT + 1))/")
        fi
        
        # Issue本文を更新
        echo "$NEW_BODY" | gh issue edit $ISSUE_NUMBER --body-file -
        
        # ログテーブルに新しい行を追加
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        NEW_LOG_ROW="| $TIMESTAMP | $CURRENT_CYCLE | $ATTEMPT_IN_CYCLE/7 | $RESULT_EMOJI | Attempt #$ATTEMPT_NUMBER |"
        
        gh issue comment $ISSUE_NUMBER --body "$NEW_LOG_ROW"
        
        # 成功した場合はIssueをクローズ
        if [ "$REPAIR_SUCCESS" == "true" ]; then
          gh issue close $ISSUE_NUMBER --comment "🎉 修復成功！試行 #$ATTEMPT_NUMBER で問題が解決しました。"
          gh issue edit $ISSUE_NUMBER \
            --remove-label "${{ env.IN_PROGRESS_LABEL }}" \
            --add-label "${{ env.COMPLETED_LABEL }}"
        fi
        
        # サイクル終了時の処理
        if [ "$ATTEMPT_IN_CYCLE" -eq "${{ env.MAX_ATTEMPTS_PER_CYCLE }}" ] && [ "$REPAIR_SUCCESS" != "true" ]; then
          # 次のサイクル番号
          NEXT_CYCLE=$((CURRENT_CYCLE + 1))
          
          gh issue comment $ISSUE_NUMBER --body "## ⏸️ サイクル $CURRENT_CYCLE 完了
          
          7回の修復試行が完了しました。
          30分のクールダウン後、サイクル $NEXT_CYCLE を自動的に開始します。
          
          🔄 **無限ループモード**: 修復成功または手動クローズまで継続します。"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ジョブ3: 定期クリーンアップ
  cleanup-old-issues:
    name: 🧹 Cleanup Old Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🧹 Close stale issues
      run: |
        # 30日以上更新されていない修復Issueをクローズ（無限ループでも古すぎるものは整理）
        STALE_DATE=$(date -u -d '30 days ago' +%Y-%m-%dT%H:%M:%SZ)
        
        gh issue list \
          --label "${{ env.REPAIR_LABEL }}" \
          --state open \
          --json number,updatedAt \
          --jq ".[] | select(.updatedAt < \"$STALE_DATE\") | .number" | \
        while read -r ISSUE_NUMBER; do
          if [ -n "$ISSUE_NUMBER" ]; then
            gh issue close $ISSUE_NUMBER \
              --comment "⏰ 30日間更新がないため、自動的にクローズしました。"
            gh issue edit $ISSUE_NUMBER \
              --remove-label "${{ env.IN_PROGRESS_LABEL }}" \
              --add-label "auto-closed-stale"
          fi
        done
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}